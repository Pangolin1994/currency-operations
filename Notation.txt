Нотация математических операций с валютами

Иерархия
Абстрактный родитель - Currency
Наследники  - Euro, Dollar, Ruble
При создании валюта принимает любой Numeric тип данных

Операции над Currency (пакет currencies)
1) сложение(+) - выполняется с наследником Currency
	 а) 2 rubles + 3 rubles -> возвращает экземпляр типа левого операнда
	 б) если типы валют отличны - превращает правый операнд в тип левого
	     3 dollars + 5 rubles -> возвращает экземпляр Dollar(3 + 5 * convert_multiplier),
		 где convert_multiplier - мн-тель конвертации
	 
2) вычитание(-) - выполняется с наследником Currency
	описание аналогично сложению с точностью до знака операции

3) умножение(*) - выполняется с численным типом
	10 rubles * 2.5 -> Ruble(25)

4) деление(/) - выполняется с численным типом
	описание аналогично умножению (реализовано через *)

Implicit конверсии (пакет conversions)
1) Любой численный тип (scala.math.Numeric) поддерживает extension операцию типа валюты
	1.5 dollars (метод double.dollar) -> экземпляр Dollar
	2 rubles (метод int.ruble) -> экземпляр Euro
2) Валюта может быть конвертирована в другую с применением соответствующего множителя
	конвертации (conversionConstants)
	
Пакет converters
1) Converter - реализует преобразования между Numeric типами и предоставляет инстансы
2) TagConverter - реализует преобразования между Currency типами

Присутствуют обратные операции (левый операнд - Numeric, правый - Currency)
Но они выполнены с использованием existential types, поэтому их результат требует
каста в реальный тип валюты для выполнения цепочки операций.

